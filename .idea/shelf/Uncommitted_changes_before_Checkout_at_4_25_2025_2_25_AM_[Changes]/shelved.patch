Index: app/src/main/java/com/example/myplantcare/receivers/NotificationReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myplantcare.receivers;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.os.Build;\r\nimport android.util.Log;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\nimport com.example.myplantcare.R;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\n\r\npublic class NotificationReceiver extends BroadcastReceiver {\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        Log.d(\"NOTIIIIIFICATION\", \"HELLO\");\r\n        // Lấy thông tin từ Intent\r\n        String plantName = intent.getStringExtra(\"plantName\");  // Tên cây\r\n        String taskName = intent.getStringExtra(\"task\");        // Tên công việc\r\n\r\n        // Kiểm tra nếu giá trị không null\r\n        if (plantName != null && taskName != null) {\r\n            // Tạo nội dung thông báo\r\n            String notificationText = \"Cây \" + plantName + \" cần làm công việc: \" + taskName;\r\n\r\n            // Tạo thông báo với kênh đã tạo trong MainActivity\r\n            NotificationCompat.Builder builder = new NotificationCompat.Builder(context, \"PLANTAPP_CHANNEL\")\r\n                    .setSmallIcon(R.drawable.ic_launcher_foreground)\r\n                    .setContentTitle(\"Thông báo PlantCare Application\")\r\n                    .setContentText(notificationText)  // Sử dụng nội dung đã tạo\r\n                    .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n            // Kiểm tra quyền POST_NOTIFICATIONS\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n                // Nếu là Android 13 trở lên, kiểm tra quyền thông báo\r\n                if (context.checkSelfPermission(android.Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {\r\n                    Log.d(\"RECEIVER\", \"Chưa cấp quyền POST_NOTIFICATIONS.\");\r\n                    return;  // Dừng lại nếu quyền chưa được cấp\r\n                }\r\n            }\r\n\r\n            // Gửi thông báo nếu quyền đã được cấp (hoặc nếu Android < 13)\r\n            NotificationManagerCompat manager = NotificationManagerCompat.from(context);\r\n            manager.notify(1, builder.build());\r\n            Log.d(\"RECEIVER\", \"Thông báo đã được gửi!\");\r\n            // Lưu thông tin vào Firestore\r\n            FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n            // Tạo dữ liệu thông báo để lưu vào Firestore\r\n            Map<String, Object> notificationData = new HashMap<>();\r\n            notificationData.put(\"title\", \"Thông báo PlantCare\");\r\n            notificationData.put(\"content\",plantName + \"cân làm công việc \" + taskName);\r\n            notificationData.put(\"number\", 1);  // Tạo timestamp tự động\r\n\r\n            // Lưu thông báo vào subcollection \"notifications\" của người dùng\r\n            db.collection(\"users\")  // Collection cha \"users\"\r\n                    .document(FirebaseAuth.getInstance().getCurrentUser().getUid())  // Document của người dùng, dùng UID làm ID\r\n                    .collection(\"notifications\")  // Subcollection \"notifications\"\r\n                    .add(notificationData)  // Thêm thông báo mới\r\n                    .addOnSuccessListener(documentReference -> {\r\n                        // Nếu lưu thành công\r\n                        Log.d(\"Firestore\", \"Thông báo đã được lưu thành công vào subcollection 'notifications'\");\r\n                    })\r\n                    .addOnFailureListener(e -> {\r\n                        // Nếu có lỗi\r\n                        Log.e(\"Firestore\", \"Lỗi lưu thông báo: \" + e.getMessage());\r\n                    });\r\n\r\n        } else {\r\n            Log.e(\"NotificationReceiver\", \"Thông tin cây hoặc công việc không hợp lệ.\");\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myplantcare/receivers/NotificationReceiver.java b/app/src/main/java/com/example/myplantcare/receivers/NotificationReceiver.java
--- a/app/src/main/java/com/example/myplantcare/receivers/NotificationReceiver.java	(revision 89bcba4420efe0637164283dc94fc654297cb02d)
+++ b/app/src/main/java/com/example/myplantcare/receivers/NotificationReceiver.java	(date 1745519727666)
@@ -42,7 +42,7 @@
                 }
             }
 
-            // Gửi thông báo nếu quyền đã được cấp (hoặc nếu Android < 13)
+            // Gửi thông báo
             NotificationManagerCompat manager = NotificationManagerCompat.from(context);
             manager.notify(1, builder.build());
             Log.d("RECEIVER", "Thông báo đã được gửi!");
@@ -52,7 +52,7 @@
             // Tạo dữ liệu thông báo để lưu vào Firestore
             Map<String, Object> notificationData = new HashMap<>();
             notificationData.put("title", "Thông báo PlantCare");
-            notificationData.put("content",plantName + "cân làm công việc " + taskName);
+            notificationData.put("content",plantName + " cần làm công việc " + taskName);
             notificationData.put("number", 1);  // Tạo timestamp tự động
 
             // Lưu thông báo vào subcollection "notifications" của người dùng
Index: app/src/main/java/com/example/myplantcare/activities/NotificationActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myplantcare.activities;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.example.myplantcare.R;\r\nimport com.example.myplantcare.adapters.NotificationAdapter;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.example.myplantcare.models.Notification;\r\nimport java.util.ArrayList;\r\n\r\npublic class NotificationActivity extends AppCompatActivity {\r\n    private RecyclerView recyclerView;\r\n    private NotificationAdapter adapter;\r\n    private FirebaseFirestore db;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_notification);\r\n\r\n        recyclerView = findViewById(R.id.notificationRecyclerView);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\r\n        db = FirebaseFirestore.getInstance();\r\n        adapter = new NotificationAdapter(new ArrayList<>(), notification -> {\r\n            Toast.makeText(NotificationActivity.this, \"Clicked: \" + notification.getContent(), Toast.LENGTH_SHORT).show();\r\n        });\r\n        recyclerView.setAdapter(adapter);\r\n\r\n\r\n        Button clear = findViewById(R.id.clear_button_notification);\r\n        clear.setOnClickListener(v -> showDeleteConfirmationDialog());\r\n\r\n        ImageView image = findViewById(R.id.arrow_back_notification);\r\n        image.setOnClickListener(v -> {\r\n            Intent i = new Intent(NotificationActivity.this, MainActivity.class);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n        fetchNotificationsByUserId(FirebaseAuth.getInstance().getCurrentUser().getUid().toString());\r\n    }\r\n\r\n    private void showDeleteConfirmationDialog() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(\"Xác nhận xóa\");\r\n        builder.setMessage(\"Bạn có chắc chắn muốn xóa tất cả thông báo?\");\r\n        builder.setNegativeButton(\"Quay lại\", (dialog, which) -> dialog.dismiss());\r\n        builder.setPositiveButton(\"Đồng ý\", (dialog, which) -> {\r\n            deleteAllNotifications();\r\n        });\r\n        AlertDialog dialog = builder.create();\r\n        dialog.show();\r\n    }\r\n\r\n\r\n    private void deleteAllNotifications() {\r\n        db.collection(\"Notification\")\r\n                .get()\r\n                .addOnCompleteListener(task -> {\r\n                    if (task.isSuccessful()) {\r\n                        QuerySnapshot querySnapshot = task.getResult();\r\n                        if (querySnapshot != null && !querySnapshot.isEmpty()) {\r\n\r\n                            // Duyệt qua tất cả các document và xóa từng document theo ID\r\n                            for (int i = 0; i < querySnapshot.size(); i++) {\r\n                                String documentId = querySnapshot.getDocuments().get(i).getId();\r\n                                Log.d(\"NotificationActivity\", \"Attempting to delete document with ID: \" + documentId);\r\n\r\n                                db.collection(\"Notification\").document(documentId)\r\n                                        .delete()\r\n                                        .addOnCompleteListener(deleteTask -> {\r\n                                            if (deleteTask.isSuccessful()) {\r\n                                                Log.d(\"NotificationActivity\", \"Document with ID \" + documentId + \" successfully deleted.\");\r\n                                            } else {\r\n                                                Log.e(\"NotificationActivity\", \"Error deleting document with ID \" + documentId, deleteTask.getException());\r\n                                            }\r\n                                        });\r\n                            }\r\n\r\n                            // Clear the notifications list and show success toast\r\n                            adapter.clearNotifications();\r\n                            Toast.makeText(NotificationActivity.this, \"Đã xóa tất cả thông báo.\", Toast.LENGTH_SHORT).show();\r\n                            Log.d(\"NotificationActivity\", \"All notifications have been deleted.\");\r\n\r\n                        } else {\r\n                            Log.d(\"NotificationActivity\", \"No notifications to delete.\");\r\n                            Toast.makeText(NotificationActivity.this, \"Không có thông báo để xóa.\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    } else {\r\n                        Log.e(\"NotificationActivity\", \"Error fetching notifications.\", task.getException());\r\n                        Toast.makeText(NotificationActivity.this, \"Lỗi khi xóa thông báo.\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n    }\r\n\r\nprivate void fetchNotificationsByUserId(String userId) {\r\n    // Truy vấn đến subcollection \"notifications\" của user với userId\r\n    db.collection(\"users\") // Collection cha \"users\"\r\n            .document(userId) // Lấy document của người dùng, dùng userId làm ID\r\n            .collection(\"notifications\") // Subcollection \"notifications\"\r\n            .get() // Lấy tất cả các document trong subcollection \"notifications\"\r\n            .addOnCompleteListener(task -> {\r\n                if (task.isSuccessful()) {\r\n                    QuerySnapshot querySnapshot = task.getResult();\r\n                    if (querySnapshot != null && !querySnapshot.isEmpty()) {\r\n                        // Duyệt qua tất cả các document trong subcollection \"notifications\"\r\n                        for (DocumentSnapshot document : querySnapshot.getDocuments()) {\r\n                            String title = document.getString(\"title\");\r\n                            String content = document.getString(\"content\");\r\n                            String timestamp = document.getString(\"timestamp\");\r\n\r\n                            // In thông tin ra Log và hiển thị thông báo\r\n                            Log.d(\"NotificationData\", \"Title: \" + title);\r\n                            Log.d(\"NotificationData\", \"Content: \" + content);\r\n                            Log.d(\"NotificationData\", \"Timestamp: \" + timestamp);\r\n                            displayNotification(title, content, timestamp);  // Hiển thị thông báo lên UI\r\n                        }\r\n                    } else {\r\n                        Log.d(\"TAG\", \"No notifications found.\");\r\n                        Toast.makeText(NotificationActivity.this, \"Không có thông báo.\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                } else {\r\n                    Log.d(\"TAG\", \"Error getting notifications.\");\r\n                    Toast.makeText(NotificationActivity.this, \"Lỗi khi lấy thông báo.\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n}\r\n\r\n    private void displayNotification(String message, String time, String count) {\r\n        Notification notification = new Notification(message, time, count);\r\n        adapter.addNotification(notification);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myplantcare/activities/NotificationActivity.java b/app/src/main/java/com/example/myplantcare/activities/NotificationActivity.java
--- a/app/src/main/java/com/example/myplantcare/activities/NotificationActivity.java	(revision 89bcba4420efe0637164283dc94fc654297cb02d)
+++ b/app/src/main/java/com/example/myplantcare/activities/NotificationActivity.java	(date 1745521060705)
@@ -57,16 +57,18 @@
         builder.setMessage("Bạn có chắc chắn muốn xóa tất cả thông báo?");
         builder.setNegativeButton("Quay lại", (dialog, which) -> dialog.dismiss());
         builder.setPositiveButton("Đồng ý", (dialog, which) -> {
-            deleteAllNotifications();
+            deleteAllNotifications(FirebaseAuth.getInstance().getCurrentUser().getUid());
         });
         AlertDialog dialog = builder.create();
         dialog.show();
     }
 
 
-    private void deleteAllNotifications() {
-        db.collection("Notification")
-                .get()
+    private void deleteAllNotifications(String userId) {
+        db.collection("users") // Collection cha "users"
+                .document(userId) // Lấy document của người dùng, dùng userId làm ID
+                .collection("notifications") // Subcollection "notifications"
+                .get() // Lấy tất cả các document trong subcollection "notifications"
                 .addOnCompleteListener(task -> {
                     if (task.isSuccessful()) {
                         QuerySnapshot querySnapshot = task.getResult();
@@ -75,30 +77,30 @@
                             // Duyệt qua tất cả các document và xóa từng document theo ID
                             for (int i = 0; i < querySnapshot.size(); i++) {
                                 String documentId = querySnapshot.getDocuments().get(i).getId();
-                                Log.d("NotificationActivity", "Attempting to delete document with ID: " + documentId);
+
 
                                 db.collection("Notification").document(documentId)
                                         .delete()
                                         .addOnCompleteListener(deleteTask -> {
                                             if (deleteTask.isSuccessful()) {
-                                                Log.d("NotificationActivity", "Document with ID " + documentId + " successfully deleted.");
+                                                Log.d("NotificationActivity", "Document ID " + documentId + " xóa thành công");
                                             } else {
-                                                Log.e("NotificationActivity", "Error deleting document with ID " + documentId, deleteTask.getException());
+                                                Log.e("NotificationActivity", "lỗi xóa thông báo" + documentId, deleteTask.getException());
                                             }
                                         });
                             }
 
-                            // Clear the notifications list and show success toast
+                            // xóa toàn bộ thông báo
                             adapter.clearNotifications();
                             Toast.makeText(NotificationActivity.this, "Đã xóa tất cả thông báo.", Toast.LENGTH_SHORT).show();
-                            Log.d("NotificationActivity", "All notifications have been deleted.");
+
 
                         } else {
-                            Log.d("NotificationActivity", "No notifications to delete.");
+
                             Toast.makeText(NotificationActivity.this, "Không có thông báo để xóa.", Toast.LENGTH_SHORT).show();
                         }
                     } else {
-                        Log.e("NotificationActivity", "Error fetching notifications.", task.getException());
+                        Log.e("NotificationActivity", "Lỗi get thông báo", task.getException());
                         Toast.makeText(NotificationActivity.this, "Lỗi khi xóa thông báo.", Toast.LENGTH_SHORT).show();
                     }
                 });
@@ -136,7 +138,6 @@
                 }
             });
 }
-
     private void displayNotification(String message, String time, String count) {
         Notification notification = new Notification(message, time, count);
         adapter.addNotification(notification);
Index: app/src/main/java/com/example/myplantcare/fragments/AddScheduleDialogFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myplantcare.fragments;\r\n\r\nimport static android.content.Context.ALARM_SERVICE;\r\nimport static androidx.core.content.ContextCompat.getSystemService;\r\n\r\nimport android.app.AlarmManager;\r\nimport android.app.AlertDialog;\r\nimport android.app.DatePickerDialog;\r\nimport android.app.Dialog;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.app.TimePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.lifecycle.ViewModel;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport com.example.myplantcare.R;\r\nimport com.example.myplantcare.models.MyPlantModel;\r\nimport com.example.myplantcare.models.ScheduleModel;\r\nimport com.example.myplantcare.models.TaskModel;\r\n\r\nimport com.example.myplantcare.receivers.NotificationReceiver;\r\nimport com.example.myplantcare.viewmodels.AddScheduleViewModel;\r\nimport com.example.myplantcare.viewmodels.MyPlantListViewModel;\r\nimport com.google.firebase.Timestamp;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\n\r\n\r\npublic class AddScheduleDialogFragment extends DialogFragment {\r\n    FirebaseFirestore db;\r\n    private Spinner spinnerPlant, spinnerTask, spinnerFrequency;\r\n    private TextView textViewStartDate, textViewStartTime;\r\n    private EditText editTextNote;\r\n    private Button buttonAddPlant, buttonSaveSchedule;\r\n    private ImageButton buttonCloseDialog;\r\n\r\n    private LinearLayout layoutCustomFrequencyDays; // <-- Layout cha mới\r\n    private EditText editTextCustomFrequencyDays;\r\n\r\n    private Calendar selectedDateCalendar = Calendar.getInstance();\r\n//    private MyPlantListViewModel myPlantListViewModel;\r\n    private AddScheduleViewModel addScheduleViewModel;\r\n\r\n    private List<MyPlantModel> userPlants = new ArrayList<>();\r\n    private List<TaskModel> allTasks = new ArrayList<>();\r\n    private List<String> frequencyOptions = new ArrayList<>();\r\n    private String userId;\r\n    private String myPlantId;\r\n    // Selected values (có thể lưu tạm)\r\n    private MyPlantModel selectedPlant = null;\r\n    private TaskModel selectedTask = null;\r\n    private String selectedFrequency = null;\r\n    private String selectedFrequencyText = null;\r\n    private Calendar selectedStartTime;\r\n    private int selectedCustomDays = -1;\r\n\r\n    public interface OnScheduleSavedListener {\r\n        void onScheduleSaved();\r\n    }\r\n\r\n    private OnScheduleSavedListener onScheduleSavedListener;\r\n\r\n    public void setOnScheduleSavedListener(OnScheduleSavedListener listener) {\r\n        this.onScheduleSavedListener = listener;\r\n    }\r\n\r\n    public static AddScheduleDialogFragment newInstance(String plantId, String userId) {\r\n        AddScheduleDialogFragment fragment = new AddScheduleDialogFragment();\r\n        Bundle args = new Bundle();\r\n        args.putString(\"myPlantId\", plantId);\r\n        args.putString(\"userId\", userId);\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        // Lấy ID cây và User ID từ arguments\r\n        if (getArguments() != null) {\r\n            myPlantId = getArguments().getString(\"myPlantId\");\r\n            userId = getArguments().getString(\"userId\");\r\n        }\r\n        // TODO: Xử lý trường hợp userId hoặc myPlantId bị null nếu cần (Toast, đóng dialog)\r\n        if (TextUtils.isEmpty(userId)) {\r\n            Toast.makeText(getContext(), \"Lỗi: Không có thông tin người dùng.\", Toast.LENGTH_SHORT).show();\r\n            dismiss(); // Đóng dialog nếu không có user ID\r\n        }\r\n        db = FirebaseFirestore.getInstance();\r\n    }\r\n    @NonNull\r\n    @Override\r\n    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(requireActivity());\r\n        LayoutInflater inflater = requireActivity().getLayoutInflater();\r\n        View view = inflater.inflate(R.layout.dialog_add_schedule, null);\r\n        initContents(view);\r\n\r\n//        myPlantListViewModel = new ViewModelProvider(requireActivity(), new ViewModelProvider.Factory() {\r\n//            @NonNull\r\n//            @Override\r\n//            public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\r\n//                return (T)new MyPlantListViewModel(userId);\r\n//            }\r\n//        }).get(MyPlantListViewModel.class);\r\n        addScheduleViewModel = new ViewModelProvider(this, new AddScheduleViewModel.Factory(userId, myPlantId)).get(AddScheduleViewModel.class);\r\n        setupSpinners();\r\n        setupObservers();\r\n        setupClickListeners();\r\n\r\n\r\n        builder.setView(view);\r\n        AlertDialog dialog = builder.create();\r\n        if (dialog.getWindow() != null) {\r\n            dialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);\r\n        }\r\n\r\n        return dialog;\r\n    }\r\n\r\n    private void setupClickListeners() {\r\n        buttonCloseDialog.setOnClickListener(v -> dismiss());\r\n        textViewStartDate.setOnClickListener(v -> showDatePickerDialog());\r\n        textViewStartTime.setOnClickListener(v -> showTimePickerDialog());\r\n        buttonSaveSchedule.setOnClickListener(v -> saveSchedule());\r\n        buttonAddPlant.setOnClickListener(v -> addPlant());\r\n\r\n    }\r\n\r\n    private void setupObservers() {\r\n        addScheduleViewModel.userPlants.observe(this, plants -> {\r\n            if(plants != null) {\r\n                updatePlantSpinner(plants);\r\n            }\r\n\r\n        });\r\n        addScheduleViewModel.allTasks.observe(this, tasks -> {\r\n            updateTaskSpinner(tasks);\r\n        });\r\n        addScheduleViewModel.saveResult.observe(this, result -> {\r\n            if(result != null && result) {\r\n                if (onScheduleSavedListener != null) {\r\n                    onScheduleSavedListener.onScheduleSaved();\r\n                }\r\n                Toast.makeText(getContext(), \"Lưu lịch trình thành công.\", Toast.LENGTH_SHORT).show();\r\n                dismiss();\r\n            }\r\n            else {\r\n                Toast.makeText(getContext(), \"Lỗi lưu lịch trình.\", Toast.LENGTH_SHORT).show();\r\n            }\r\n            addScheduleViewModel.clearSaveResult();\r\n        });\r\n        addScheduleViewModel.errorMessage.observe(this, errorMessage -> {\r\n            if (errorMessage != null && !errorMessage.isEmpty()) {\r\n                Toast.makeText(getContext(), \"Lỗi: \" + errorMessage, Toast.LENGTH_SHORT).show();\r\n                Log.e(\"AddScheduleDialogFragment\", \"ViewModel Error: \" + errorMessage);\r\n                addScheduleViewModel.clearErrorMessage(); // Xóa lỗi sau khi hiển thị\r\n            }\r\n        });\r\n    }\r\n\r\n    private void updateTaskSpinner(List<TaskModel> tasks) {\r\n        Log.d(\"AddScheduleDialogFragment\", \"updateTaskSpinner called\"+ tasks.size());\r\n        if (tasks != null) {\r\n            List<String> taskNames = new ArrayList<>();\r\n            // Thêm item gợi ý/placeholder đầu tiên nếu cần thiết\r\n            // taskNames.add(\"Chọn công việc...\");\r\n            allTasks = tasks;\r\n            for (TaskModel task : tasks) {\r\n                taskNames.add(task.getName()); // Sử dụng tên hiển thị\r\n            }\r\n            // Cập nhật Adapter cho Spinner task\r\n            ArrayAdapter<String> taskAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, taskNames);\r\n            taskAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n            spinnerTask.setAdapter(taskAdapter);\r\n\r\n            // Thiết lập listener cho Spinner task (để lấy selectedTask)\r\n            spinnerTask.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n                @Override\r\n                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                    // Bỏ qua item placeholder nếu có\r\n                    // if (position > 0) { // Nếu có placeholder ở vị trí 0\r\n                    //      selectedTask = allTasks.get(position - 1);\r\n                    // } else {\r\n                    //      selectedTask = null; // placeholder\r\n                    // }\r\n                    if (position < allTasks.size()) { // Đảm bảo vị trí hợp lệ\r\n                        selectedTask = allTasks.get(position); // Lưu task được chọn\r\n                        Log.d(\"AddScheduleDialogFragment\", \"Task selected: \" + selectedTask.getName() + \", ID: \" + selectedTask.getId());\r\n                    } else {\r\n                        selectedTask = null;\r\n                        Log.d(\"AddScheduleDialogFragment\", \"No task selected.\");\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onNothingSelected(AdapterView<?> parent) {\r\n                    selectedTask = null;\r\n                }\r\n            });\r\n\r\n        } else {\r\n            allTasks = new ArrayList<>();\r\n            // Cập nhật Adapter với danh sách rỗng nếu không có tasks\r\n            ArrayAdapter<String> emptyTaskAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, new ArrayList<>());\r\n            emptyTaskAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n            spinnerTask.setAdapter(emptyTaskAdapter);\r\n            Log.w(\"AddScheduleDialogFragment\", \"Tasks data is null or empty.\");\r\n            Toast.makeText(getContext(), \"Không tải được danh sách công việc.\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    private void updatePlantSpinner(List<MyPlantModel> plants) {\r\n        List<String> plantNames = new ArrayList<>();\r\n        plantNames.add(\"Chọn 1 cây...\"); // Thêm item gợi ý/placeholder đầu tiên\r\n        int selectedPlantPosition = -1;\r\n        if (plants != null && !plants.isEmpty()) {\r\n            userPlants = plants;\r\n            for (int i = 0; i < plants.size(); i++) {\r\n                MyPlantModel plant = plants.get(i);\r\n                plantNames.add(plant.getNickname()); // Sử dụng nickname\r\n                // Nếu đang ở chi tiết cây cụ thể, tìm vị trí của cây đó\r\n                if (!TextUtils.isEmpty(myPlantId) && plant.getId() != null && plant.getId().equals(myPlantId)) {\r\n                    selectedPlantPosition = i;\r\n                }\r\n            }\r\n            ArrayAdapter<String> plantAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, plantNames);\r\n            plantAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n            spinnerPlant.setAdapter(plantAdapter);\r\n\r\n\r\n            // Nếu mở từ chi tiết cây, chọn sẵn cây đó trong Spinner\r\n            if (!TextUtils.isEmpty(myPlantId) && selectedPlantPosition != -1) {\r\n                spinnerPlant.setSelection(selectedPlantPosition);\r\n            } else if (plants.size() > 0) {\r\n                // Nếu không mở từ chi tiết cây, chọn cây đầu tiên mặc định\r\n                // spinnerPlant.setSelection(0); // Tùy chọn, hoặc để người dùng tự chọn\r\n            }\r\n\r\n            spinnerPlant.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n                @Override\r\n                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                    Log.d(\"AddScheduleDialogFragment\", \"plant selected position \"+position);\r\n                    // Bỏ qua item placeholder nếu có\r\n                     if (position > 0) { // Nếu có placeholder ở vị trí 0\r\n                          selectedPlant = userPlants.get(position-1);\r\n                         Log.d(\"AddScheduleDialogFragment\", \"Plant selected: \" + selectedPlant.getNickname() + \", ID: \" + selectedPlant.getId());\r\n                     } else {\r\n                          selectedPlant = null; // placeholder\r\n                         Log.d(\"AddScheduleDialogFragment\", \"No plant selected.\");\r\n                     }\r\n                }\r\n\r\n                @Override\r\n                public void onNothingSelected(AdapterView<?> parent) {\r\n                    selectedPlant = null;\r\n                }\r\n            });\r\n        } else {\r\n            Log.d(\"AddScheduleDialogFragment\", \"No plants found or error loading plants.\");\r\n            userPlants = new ArrayList<>(); // Đặt danh sách rỗng khi data null\r\n            ArrayAdapter<String> emptyPlantAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, new ArrayList<>());\r\n            emptyPlantAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n            spinnerPlant.setAdapter(emptyPlantAdapter);\r\n            Toast.makeText(getContext(), \"Không tìm thấy cây nào.\", Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n\r\n        ArrayAdapter<String> plantAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, plantNames);\r\n        plantAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spinnerPlant.setAdapter(plantAdapter);\r\n    }\r\n\r\n    private void addPlant() {\r\n        Toast.makeText(requireContext(), \"Chức năng thêm cây update sau\", Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    private void saveSchedule() {\r\n        if (selectedPlant == null || TextUtils.isEmpty(selectedPlant.getId())) {\r\n            Toast.makeText(getContext(), \"Vui lòng chọn cây.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        if (selectedTask == null || TextUtils.isEmpty(selectedTask.getId())) {\r\n            Toast.makeText(getContext(), \"Vui lòng chọn công việc.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        if (textViewStartDate.getText().toString().equals(\"Chọn ngày\")) {\r\n            Toast.makeText(getContext(), \"Vui lòng chọn ngày bắt đầu.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        if (textViewStartTime.getText().toString().equals(\"Chọn giờ\")) {\r\n            Toast.makeText(getContext(), \"Vui lòng chọn giờ.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        if (TextUtils.isEmpty(selectedFrequencyText)) {\r\n            Toast.makeText(getContext(), \"Vui lòng chọn tần suất.\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n\r\n        int customDays = -1;\r\n        if (selectedFrequencyText.equals(\"x ngày 1 lần\")) {\r\n            String daysText = editTextCustomFrequencyDays.getText().toString().trim();\r\n            if (TextUtils.isEmpty(daysText)) {\r\n                Toast.makeText(getContext(), \"Vui lòng nhập số ngày cho tần suất tùy chỉnh.\", Toast.LENGTH_SHORT).show();\r\n                editTextCustomFrequencyDays.requestFocus();\r\n                return;\r\n            }\r\n            try {\r\n                customDays = Integer.parseInt(daysText);\r\n                if (customDays <= 0) {\r\n                    Toast.makeText(getContext(), \"Số ngày phải lớn hơn 0.\", Toast.LENGTH_SHORT).show();\r\n                    editTextCustomFrequencyDays.requestFocus();\r\n                    return;\r\n                }\r\n            } catch (NumberFormatException e) {\r\n                Toast.makeText(getContext(), \"Số ngày không hợp lệ.\", Toast.LENGTH_SHORT).show();\r\n                editTextCustomFrequencyDays.requestFocus();\r\n                return;\r\n            }\r\n        }\r\n\r\n        ScheduleModel newSchedule = new ScheduleModel();\r\n        newSchedule.setTaskId(selectedTask.getId());\r\n        newSchedule.setFrequency(convertFrequencyToDays(selectedFrequencyText));\r\n        newSchedule.setStartDate(new Timestamp(selectedDateCalendar.getTime()));\r\n        newSchedule.setTime(new Timestamp(selectedStartTime.getTime()));\r\n        if (userId != null && selectedPlant != null && selectedPlant.getId() != null) {\r\n            Log.d(\"AddScheduleDialogFragment\", \"Saving schedule for plant ID: \" + selectedPlant.getId() + \" and user ID: \" + userId);\r\n            addScheduleViewModel.addSchedule(selectedPlant.getId(), newSchedule);\r\n\r\n\r\n            // Đặt thông báo định kỳ\r\n            setPeriodicNotification(selectedPlant, newSchedule);\r\n        } else {\r\n            Toast.makeText(getContext(), \"Lỗi: Thiếu thông tin cây hoặc người dùng để lưu.\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n    private int convertFrequencyToDays(String frequency) {\r\n        switch (frequency){\r\n            case \"Hàng ngày\":\r\n                return 1;\r\n            case \"Hàng tuần\":\r\n                return 7;\r\n            default:\r\n                return Integer.parseInt(editTextCustomFrequencyDays.getText().toString().trim());\r\n        }\r\n    }\r\n    private void showTimePickerDialog() {\r\n        if (selectedStartTime == null) {\r\n            selectedStartTime = Calendar.getInstance();\r\n        }\r\n\r\n        final Calendar c = (Calendar) selectedStartTime.clone();\r\n        int hour = c.get(Calendar.HOUR_OF_DAY);\r\n        int minute = c.get(Calendar.MINUTE);\r\n\r\n        TimePickerDialog timePickerDialog = new TimePickerDialog(requireContext(),\r\n                (view, hourOfDay, minute1) -> {\r\n                    selectedStartTime.set(Calendar.HOUR_OF_DAY, hourOfDay);\r\n                    selectedStartTime.set(Calendar.MINUTE, minute1);\r\n                    updateStartTimeLabel();\r\n                }, hour, minute, true);\r\n\r\n        timePickerDialog.show();\r\n    }\r\n    private void updateStartTimeLabel() {\r\n        SimpleDateFormat timeFormat = new SimpleDateFormat(\"h : mm a\", Locale.getDefault()); // a for AM/PM\r\n        textViewStartTime.setText(timeFormat.format(selectedDateCalendar.getTime()));\r\n    }\r\n\r\n    private void showDatePickerDialog() {\r\n        final Calendar c = selectedDateCalendar != null ? selectedDateCalendar : Calendar.getInstance();\r\n        int year = c.get(Calendar.YEAR);\r\n        int month = c.get(Calendar.MONTH);\r\n        int day = c.get(Calendar.DAY_OF_MONTH);\r\n\r\n        DatePickerDialog datePickerDialog = new DatePickerDialog(requireContext(),\r\n                (view, year1, monthOfYear, dayOfMonth) -> {\r\n                    // Lưu ngày đã chọn vào selectedDateCalendar\r\n                    selectedDateCalendar.set(Calendar.YEAR, year1);\r\n                    selectedDateCalendar.set(Calendar.MONTH, monthOfYear);\r\n                    selectedDateCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);\r\n                    // Cập nhật TextView hiển thị ngày\r\n                    updateStartDateLabel();\r\n                }, year, month, day);\r\n\r\n        // Giới hạn ngày có thể chọn (tùy chọn)\r\n        // datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis());\r\n        datePickerDialog.show();\r\n    }\r\n\r\n    private void updateStartDateLabel() {\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd / MM / yyyy\", Locale.getDefault());\r\n        textViewStartDate.setText(dateFormat.format(selectedDateCalendar.getTime()));\r\n    }\r\n    private void initContents(View view) {\r\n        spinnerPlant = view.findViewById(R.id.spinner_plant);\r\n        spinnerTask = view.findViewById(R.id.spinner_task);\r\n        spinnerFrequency = view.findViewById(R.id.spinner_frequency);\r\n        textViewStartDate = view.findViewById(R.id.text_view_start_date);\r\n        textViewStartTime = view.findViewById(R.id.text_view_start_time);\r\n        editTextNote = view.findViewById(R.id.edit_text_note);\r\n        buttonAddPlant = view.findViewById(R.id.button_add_plant);\r\n        buttonSaveSchedule = view.findViewById(R.id.button_save_schedule);\r\n        buttonCloseDialog = view.findViewById(R.id.button_close_dialog);\r\n        layoutCustomFrequencyDays = view.findViewById(R.id.layout_custom_frequency_days);\r\n        editTextCustomFrequencyDays = view.findViewById(R.id.edit_text_custom_frequency_days);\r\n    }\r\n    private void setupSpinners() {\r\n        // ---- Cây ----\r\n        ArrayAdapter<String> plantAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, new ArrayList<>());\r\n        plantAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spinnerPlant.setAdapter(plantAdapter);\r\n\r\n        // ---- Công việc ----\r\n        ArrayAdapter<String> taskAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, new ArrayList<>());\r\n        taskAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spinnerTask.setAdapter(taskAdapter);\r\n\r\n        // ---- Tần suất ----\r\n        frequencyOptions.clear();\r\n        frequencyOptions.add(\"Hàng ngày\");\r\n        frequencyOptions.add(\"Hàng tuần\");\r\n        frequencyOptions.add(\"x ngày 1 lần\");\r\n        ArrayAdapter<String> frequencyAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, frequencyOptions);\r\n        frequencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spinnerFrequency.setAdapter(frequencyAdapter);\r\n\r\n        spinnerFrequency.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String selectedOption = (String) parent.getItemAtPosition(position);\r\n                Log.d(\"AddScheduleDialogFragment\", \"Frequency selected: \" + selectedOption);\r\n                selectedFrequencyText = selectedOption; // Lưu text tùy chọn đã chọn\r\n\r\n                // *** Logic hiển thị/ẩn EditText số ngày ***\r\n                if (\"x ngày 1 lần\".equals(selectedOption)) {\r\n                    layoutCustomFrequencyDays.setVisibility(View.VISIBLE);\r\n                     editTextCustomFrequencyDays.requestFocus();\r\n                } else {\r\n                    layoutCustomFrequencyDays.setVisibility(View.GONE);\r\n                    editTextCustomFrequencyDays.setText(\"\");\r\n                    selectedCustomDays = -1;\r\n                }\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n                layoutCustomFrequencyDays.setVisibility(View.GONE);\r\n                editTextCustomFrequencyDays.setText(\"\");\r\n                selectedCustomDays = -1;\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setPeriodicNotification(MyPlantModel myPlant, ScheduleModel schedule) {\r\n        // Kiểm tra tần suất lặp lại từ ScheduleModel (số ngày lặp lại)\r\n        int frequencyInDays = schedule.getFrequency();  // Giả sử frequency được lưu dưới dạng số ngày\r\n\r\n        if (frequencyInDays <= 0) {\r\n            // Nếu tần suất không hợp lệ, không tạo thông báo\r\n            Log.d(\"Notification\", \"Tần suất không hợp lệ\");\r\n            return;\r\n        }\r\n\r\n        // Lấy thời gian thông báo từ ScheduleModel (biến time là Timestamp)\r\n        Timestamp timestamp = schedule.getTime();  // Giả sử time là Timestamp\r\n        if (timestamp == null) {\r\n            Log.d(\"Notification\", \"Không có thời gian thông báo\");\r\n            return;\r\n        }\r\n        schedule.getTime();\r\n        // Chuyển Timestamp thành Calendar\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.setTimeInMillis(timestamp.toDate().getTime());  // Chuyển đổi Timestamp thành Date rồi lấy mili giây\r\n\r\n        // Lấy giờ, phút từ Timestamp\r\n        int hourOfDay = calendar.get(Calendar.HOUR_OF_DAY);  // Lấy giờ trong ngày\r\n        int minute = calendar.get(Calendar.MINUTE);  // Lấy phút\r\n\r\n        // Thiết lập thời gian gửi thông báo: giờ và phút từ Timestamp, giữ nguyên ngày hiện tại\r\n        calendar.set(Calendar.HOUR_OF_DAY, hourOfDay);\r\n        calendar.set(Calendar.MINUTE, minute);\r\n        calendar.set(Calendar.SECOND, 0);  // Đặt giây = 0 để tránh việc trễ thông báo\r\n        calendar.set(Calendar.MILLISECOND, 0);  // Đặt mili giây = 0\r\n\r\n        // Nếu thời gian đã qua trong ngày, đặt thời gian cho ngày tiếp theo\r\n        if (calendar.getTimeInMillis() < System.currentTimeMillis()) {\r\n            calendar.add(Calendar.DATE, 1);  // Thêm một ngày nếu thời gian đã qua\r\n        }\r\n\r\n        // Kiểm tra getActivity() có null không trước khi sử dụng\r\n        if (getActivity() == null) {\r\n            Log.e(\"Notification\", \"Activity không được đính kèm!\");\r\n            return;\r\n        }\r\n\r\n        Intent intent = new Intent(getActivity(), NotificationReceiver.class);  // NotificationReceiver là BroadcastReceiver\r\n        DocumentReference docRef = db.collection(\"tasks\").document(schedule.getTaskId());\r\n\r\n        // Lấy document từ Firestore\r\n        docRef.get().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                DocumentSnapshot document = task.getResult();\r\n                if (document.exists()) {\r\n                    // Tiến hành cài đặt PendingIntent và AlarmManager sau khi có kết quả từ Firestore\r\n                    String taskName = document.getString(\"name\");\r\n                    intent.putExtra(\"plantName\", myPlant.getNickname());\r\n                    intent.putExtra(\"task\", taskName);\r\n                    PendingIntent pendingIntent = PendingIntent.getBroadcast(getActivity(), 0, intent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);\r\n\r\n                    long intervalMillis = frequencyInDays * 24 * 60 * 60 * 1000;\r\n                    long triggerAtMillis = calendar.getTimeInMillis();\r\n                    AlarmManager alarmManager = (AlarmManager) getActivity().getSystemService(Context.ALARM_SERVICE);\r\n\r\n                    alarmManager.setInexactRepeating(\r\n                            AlarmManager.RTC_WAKEUP,\r\n                            triggerAtMillis,\r\n                            intervalMillis,\r\n                            pendingIntent);\r\n                } else {\r\n                    Log.d(\"Firestore\", \"Document does not exist!\");\r\n                }\r\n            } else {\r\n                Log.e(\"Firestore\", \"Error getting document\", task.getException());\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myplantcare/fragments/AddScheduleDialogFragment.java b/app/src/main/java/com/example/myplantcare/fragments/AddScheduleDialogFragment.java
--- a/app/src/main/java/com/example/myplantcare/fragments/AddScheduleDialogFragment.java	(revision 89bcba4420efe0637164283dc94fc654297cb02d)
+++ b/app/src/main/java/com/example/myplantcare/fragments/AddScheduleDialogFragment.java	(date 1745521821460)
@@ -531,11 +531,12 @@
             if (task.isSuccessful()) {
                 DocumentSnapshot document = task.getResult();
                 if (document.exists()) {
-                    // Tiến hành cài đặt PendingIntent và AlarmManager sau khi có kết quả từ Firestore
+                    // Tạo nhắc nhở sau khi có kết quả từ Firestore
                     String taskName = document.getString("name");
                     intent.putExtra("plantName", myPlant.getNickname());
                     intent.putExtra("task", taskName);
-                    PendingIntent pendingIntent = PendingIntent.getBroadcast(getActivity(), 0, intent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
+                    int requestCode = schedule.getId().hashCode();
+                    PendingIntent pendingIntent = PendingIntent.getBroadcast(getActivity(), requestCode, intent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
 
                     long intervalMillis = frequencyInDays * 24 * 60 * 60 * 1000;
                     long triggerAtMillis = calendar.getTimeInMillis();
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n//    id(\"com.google.gms.google-services\")\r\n    id 'com.google.gms.google-services'\r\n}\r\n\r\nandroid {\r\n    namespace 'com.example.myplantcare'\r\n    compileSdk 35\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.myplantcare\"\r\n        minSdk 26\r\n        targetSdk 35\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        resValue \"string\", \"api_key\", \"e3095967db634bc3c6b7bf3174e33fa9\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_11\r\n        targetCompatibility JavaVersion.VERSION_11\r\n    }\r\n    buildFeatures {\r\n        viewBinding true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation libs.appcompat\r\n    implementation libs.material\r\n    implementation libs.constraintlayout\r\n    implementation libs.navigation.fragment\r\n    implementation libs.navigation.ui\r\n    implementation libs.activity\r\n    implementation libs.lifecycle.livedata.ktx\r\n    implementation libs.lifecycle.viewmodel.ktx\r\n    implementation libs.firebase.firestore\r\n    implementation libs.firebase.messaging\r\n    testImplementation libs.junit\r\n    androidTestImplementation libs.ext.junit\r\n    androidTestImplementation libs.espresso.core\r\n    implementation platform(libs.firebase.bom)\r\n    implementation(libs.firebase.analytics)\r\n    implementation(libs.firebase.auth)\r\n    implementation(libs.google.firebase.firestore)\r\n    implementation (libs.glide)\r\n    implementation (libs.retrofit)\r\n    implementation (libs.converter.gson)\r\n    implementation (libs.gson)\r\n    implementation (libs.cloudinary.android)\r\n    implementation libs.mpandroidchart\r\n    implementation libs.mpandroidchart.vv303\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 89bcba4420efe0637164283dc94fc654297cb02d)
+++ b/app/build.gradle	(date 1745512688172)
@@ -59,5 +59,5 @@
     implementation (libs.cloudinary.android)
     implementation libs.mpandroidchart
     implementation libs.mpandroidchart.vv303
-
+    implementation ("com.airbnb.android:lottie:6.6.6")
 }
